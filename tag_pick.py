import csv
import questionary
from rich.console import Console
from rich.panel import Panel
import re
from datetime import datetime

console = Console()

def normalize_date(date_string: str) -> str:
    """入力された日付文字列をYYYY/MM/DD形式に正規化する。"""
    if not date_string:
        return None
    parts = date_string.split('/')
    year, month, day = int(parts[0]), int(parts[1]), int(parts[2])
    dt = datetime(year, month, day)
    return dt.strftime('%Y/%m/%d')

def is_valid_date(date_string: str):
    """YYYY/M/Dのような柔軟な日付形式を検証する。"""
    if not date_string:
        return True
    if not re.match(r"^\d{4}/\d{1,2}/\d{1,2}$", date_string):
        return "フォーマットが正しくありません。YYYY/M/D形式で入力してください。"
    try:
        parts = date_string.split('/')
        year, month, day = int(parts[0]), int(parts[1]), int(parts[2])
        datetime(year, month, day)
        return True
    except ValueError:
        return "無効な日付です。実在する日付を入力してください。"

def load_words(filename="words.csv"):
    """Loads words from a CSV file."""
    try:
        with open(filename, "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            next(reader)  # Skip header
            return [row[0] for row in reader]
    except FileNotFoundError:
        console.print(f"[bold red]エラー: {filename} が見つかりません。[/bold red]")
        return None

def save_settings(settings_data, active_list_name):
    """Saves the entire settings dictionary and active list name to setting.py."""
    content = f"""# settings.py

# This file is automatically generated. Do not edit manually.

settings_data = {repr(settings_data)}

active_list_name = {repr(active_list_name)}
"""
    with open("setting.py", "w", encoding="utf-8") as f:
        f.write(content)

def load_settings():
    """Loads settings from setting.py."""
    try:
        from setting import settings_data, active_list_name
        return settings_data, active_list_name
    except (ImportError, AttributeError, SyntaxError):
        return {}, None

def print_help():
    """Prints the help message."""
    help_text = (
        "リスト名に紐づけて、プラント名、期間、単語リストを管理します。\n\n"
        "[bold]主な操作:[/bold]\n"
        "- [bold]リスト名を変更/選択する[/bold]:\n"
        "  - 既存のリストを選択するか、新しいリストを作成します。\n"
        "  - すべての設定はリスト名に紐づいて保存・読み込みされます。\n"
        "- [bold]単語を検索してピックアップする[/bold]:\n"
        "  - 現在選択中のリストに単語を追加します。\n"
        "- [bold]その他の設定[/bold]:\n"
        "  - プラント名や期間は、現在選択中のリストに対して設定されます。"
    )
    console.print(Panel(help_text, title="[bold cyan]ヘルプ[/bold cyan]", border_style="cyan"))

def main():
    """Main function for the interactive CLI app."""
    all_words = load_words()
    if all_words is None:
        return

    settings_data, active_list_name = load_settings()

    console.print(Panel("[bold]単語ピックアップツールへようこそ！[/bold]", style="bold blue"))

    while True:
        # Get current settings based on active list name
        current_settings = settings_data.get(active_list_name, {})
        list_name = active_list_name
        plant_name = current_settings.get('plant_name')
        start_date = current_settings.get('start_date')
        end_date = current_settings.get('end_date')
        picked_words = current_settings.get('picked_words', [])

        # Save settings on every loop to ensure persistence
        save_settings(settings_data, active_list_name)

        # Display current status
        title = "\n[bold green]現在のリスト: "
        if list_name:
            title += f"[bold yellow]{list_name}[/bold yellow]"
            details = []
            if plant_name: details.append(f"プラント: {plant_name}")
            if start_date: details.append(f"開始日: {start_date}")
            if end_date: details.append(f"終了日: {end_date}")
            if details:
                title += f" ({', '.join(details)})"
        else:
            title += "[bold red](未選択)[/bold red]"
        console.print(title)

        if picked_words:
            console.print(", ".join(picked_words))
        else:
            console.print("[dim]（空）[/dim]")

        # Define choices, disabling some if no list is active
        choices = [
            "リスト名を変更/選択する",
            questionary.Choice("プラント名を設定する", disabled=not active_list_name),
            questionary.Choice("期間を設定する", disabled=not active_list_name),
            questionary.Choice("単語を検索してピックアップする", disabled=not active_list_name),
            questionary.Choice("ピックアップリストから削除する", disabled=not active_list_name or not picked_words),
            "ヘルプを表示する",
            "終了する",
        ]

        action = questionary.select("何をしますか？", choices=choices).ask()

        if action is None or action == "終了する":
            console.print("[bold blue]アプリケーションを終了します。[/bold blue]")
            break

        elif action == "リスト名を変更/選択する":
            existing_lists = list(settings_data.keys())
            choices = sorted(existing_lists) + ["[ 新しいリストを作成 ]"]
            
            selected_option = questionary.select(
                "どのリストを扱いますか？", choices=choices
            ).ask()

            if selected_option == "[ 新しいリストを作成 ]":
                new_name = questionary.text("新しいリスト名を入力してください:").ask()
                if new_name and new_name not in settings_data:
                    active_list_name = new_name
                    settings_data[active_list_name] = {'picked_words': []} # Initialize
                    console.print(f"[bold blue]新しいリスト「{active_list_name}」を作成しました。[/bold blue]")
                elif not new_name:
                    console.print("[yellow]リスト名は空にできません。[/yellow]")
                else:
                    console.print(f"[yellow]リスト「{new_name}」は既に存在します。[/yellow]")
            elif selected_option:
                active_list_name = selected_option
                console.print(f"[bold blue]リスト「{active_list_name}」を選択しました。[/bold blue]")

        elif action == "プラント名を設定する":
            new_plant_name = questionary.text("プラント名を入力してください:", default=plant_name or "").ask()
            settings_data[active_list_name]['plant_name'] = new_plant_name

        elif action == "期間を設定する":
            start_input = questionary.text("開始日 (YYYY/M/D):", validate=is_valid_date, default=start_date or "").ask()
            settings_data[active_list_name]['start_date'] = normalize_date(start_input)

            def validate_end_date(date_string):
                current_start = settings_data[active_list_name].get('start_date')
                if not date_string: return True
                res = is_valid_date(date_string)
                if res is not True: return res
                if current_start and normalize_date(date_string) < current_start:
                    return f"終了日は開始日 ({current_start}) 以降にしてください。"
                return True

            end_input = questionary.text("終了日 (YYYY/M/D):", validate=validate_end_date, default=end_date or "").ask()
            settings_data[active_list_name]['end_date'] = normalize_date(end_input)

        elif action == "単語を検索してピックアップする":
            available_words = [w for w in all_words if w not in picked_words]
            if not available_words:
                console.print("[yellow]すべての単語が既に追加されているか、元の単語リストが空です。[/yellow]")
                continue

            search_term = questionary.autocomplete(
                "検索語を入力してください:",
                choices=available_words,
                validate=lambda text: True if text else "検索語を入力してください。",
            ).ask()

            if not search_term:
                continue

            # After autocomplete, we perform a broader search to allow multiple selections
            search_results = sorted([w for w in available_words if search_term.lower() in w.lower()])

            if not search_results:
                # This case should ideally not be reached if autocomplete finds a match,
                # but as a fallback.
                console.print("[yellow]一致する単語は見つかりませんでした。[/yellow]")
                continue

            words_to_add = questionary.checkbox(
                "ピックアップする単語をスペースキーで選択してください（Enterで確定）:",
                choices=search_results,
            ).ask()

            if words_to_add:
                current_picked = settings_data[active_list_name].get('picked_words', [])
                current_picked.extend(words_to_add)
                settings_data[active_list_name]['picked_words'] = sorted(list(set(current_picked)))
                console.print(f"[bold green]✓ {len(words_to_add)}件の単語をピックアップしました。[/bold green]")

        elif action == "ピックアップリストから削除する":
            words_to_remove = questionary.checkbox("削除する単語を選択:", choices=picked_words).ask()
            if words_to_remove:
                current_picked = settings_data[active_list_name].get('picked_words', [])
                settings_data[active_list_name]['picked_words'] = sorted([w for w in current_picked if w not in words_to_remove])

        elif action == "ヘルプを表示する":
            print_help()

if __name__ == "__main__":
    main()
